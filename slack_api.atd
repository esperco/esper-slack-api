(* JSON types used in Slack API

   As Slack does not provide formal definitions for their JSON objects,
   most of the information here are gathered from the informal documentation
   at https://api.slack.com and verified through observation.

   The sets of fields are often incomplete, as fields are added only as needed,
   to avoid over- and wrong specification.

   When adding a new field, use '?' or '~' unless the field is explicitly
   documented as "required" by Slack.
*)

type slack_channel = string wrap <ocaml module="Slack_api_channel">
type slack_color = string wrap <ocaml module="Slack_api_color">
type slack_style = string wrap <ocaml module="Slack_api_style">
type slack_teamid = string wrap <ocaml module="Slack_api_teamid">
type slack_userid = string wrap <ocaml module="Slack_api_userid">
type slack_username = string wrap <ocaml module="Slack_api_username">
type slack_ts = string wrap <ocaml module="Slack_api_ts">

type embedded_item <ocaml module="Slack_api_embedded" t="t"> = abstract

type auth = {
  access_token: string;
  scope: string;
  ?team_id: slack_teamid option;
  ?team_name: string option;
  ?bot: bot option;
}

type bot = {
  bot_user_id: string;
  bot_access_token: string;
}

type user_identity_response = {
  user: user;
  team: team;
}

type user = {
  name: slack_username;
  id:   slack_userid;
} <ocaml field_prefix="slackuser_">

type team = {
  id: slack_teamid;
} <ocaml field_prefix="slackteam_">

type channel_response = {
  channel: channel;
}

type channel = {
  id: slack_channel;
} <ocaml field_prefix="slackchannel_">

type attachments = attachment list

type mrkdwn_in = [
  | Pretext <json name="pretext">
  | Text <json name="text">
  | Fields <json name="fields">
]

type attachment = {
  ?color: slack_color option;
  ~attachment_type: string;
  ~fallback: string;
  ?pretext: string option;
  ?author_name: string option;
  ?author_link: string option;
  ?author_icon: string option;
  ?title: string option;
  ?title_link: string option;
  ?text: string option;
  ~fields: attachment_field list;
  ?image_url: string option;
  ?thumb_url: string option;
  ?footer: string option;
  ?footer_icon: string option;
  ?ts: float <json repr="int"> option;

  ~actions: attachment_action list;
  ?callback_id: string option; (*required for actions*)

  ~mrkdwn_in: mrkdwn_in list;
} <ocaml field_prefix="attach_">

type attachment_field = {
  ~title: string;
  ~value: string;
  ~short: bool;
} <ocaml field_prefix="field_">

type attachment_action = {
  name: string;
  ?value: string option;
  ~text: string;
  ?style: slack_style option;
  type_ <json name="type">: string;
  ?confirm: action_confirm option;
} <ocaml field_prefix="action_">

type action_confirm = {
  ~title: string;
  ~text: string;
  ?ok_text: string option;
  ?dismiss_text: string option;
} <ocaml field_prefix="confirm_">

type action_in_response = {
  name: string;
  ?value: string option;
} <ocaml field_prefix="act_">

type message_action_response = {
  actions: action_in_response list;
  callback_id: string;
  token: string;
  original_message: simple_message;
  (* more fields... *)
} <ocaml field_prefix="act_">

type simple_message = {
  ?text: string option;
  ~attachments: attachments;
  ?replace_original: bool option;
} <ocaml field_prefix="m_">

(*
   Slack doesn't use HTTP status code to indicate the type of the response.
   We have to figure it out by parsing the response twice.
   This is a supertype of all responses.
*)
type response = {
  ok: bool;
}

type error_response = {
  ok: bool; (* false *)
  error: string; (* error code *)
}

type rtm_start_resp = {
  (* 'ok' field omitted *)
  url: string;
    (* Websocket URL *)

  (* a bunch of fields omitted *)
}

(*
   Type of the events received from the Slack RTM API.
*)

type event = [
  | Hello
  | Message of message
  | Reaction_added of reaction_added
  | Reaction_removed of reaction_removed
  | User_typing of user_typing
  | Other of string (* original input data, presumably json *)
]

type type_only = {
  type_ <json name="type">: string;
}

type message = {
  type_ <json name="type">: string;
  ts: slack_ts; (* 1355517523.000005 *)
  ?channel: slack_channel option; (* C2147483705 *)
  ?user: slack_userid option; (* U2147483697, None if message is by a bot *)

  (* `text` field is present when the message was entered by the user.
      `message` is present when the message was updated by the bot. *)
  ?text: string option;
  ?message: embedded_item option;
}

type user_typing = {
  type_ <json name="type">: string;
  channel: slack_channel;
  user: slack_userid;
}

type reaction_name = string
  (* an undocumented enum that contains elements such as "thumbsup" *)

type reaction_added = {
  type_ <json name="type">: string;
  user: slack_userid;
  reaction: reaction_name;
  ?item_user: slack_userid option; (* None if the commented item is by a bot *)
  item: embedded_item;
  event_ts: slack_ts;
}

type reaction_removed = {
  type_ <json name="type">: string;
  user: slack_userid;
  reaction: reaction_name;
  ?item_user: slack_userid option; (* None if the commented item is by a bot *)
  item: embedded_item;
  event_ts: slack_ts;
}
